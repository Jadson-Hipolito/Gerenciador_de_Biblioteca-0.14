#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>
#include <string.h>

int validar_nome(const char *nome) {
    if (nome == NULL || nome[0] == '\0') {
        // Verifica se a string está vazia ou é NULL.
        return 0;  // Nome inválido
    }

    for (int i = 0; nome[i] != '\0'; i++) {
        // Verifica cada caractere da string.
        if (!isalpha(nome[i]) && nome[i] != ' ') {
            // Se não for uma letra ou um espaço, o nome é inválido.
            return 0;  // Nome inválido
        }
    }

    return 1;  // Nome válido
}

bool validar_cpf(const char *cpf) {
    if (cpf == NULL) {
        return false; // CPF inválido se for NULL
    }

    // Verifica se a string tem 11 caracteres
    int i = 0;
    while (cpf[i] != '\0') {
        if (!isdigit(cpf[i])) {
            return false; // CPF inválido se contiver caracteres não numéricos
        }
        i++;
    }
    if (i != 11) {
        return false; // CPF inválido se não tiver 11 dígitos
    }

    // Calcula o primeiro dígito verificador
    int soma = 0;
    for (i = 0; i < 9; i++) {
        soma += (cpf[i] - '0') * (10 - i);
    }
    int primeiroDigito = 11 - (soma % 11);

    if (primeiroDigito >= 10) {
        primeiroDigito = 0;
    }

    // Verifica o primeiro dígito verificador
    if (cpf[9] - '0' != primeiroDigito) {
        return false; // CPF inválido se o primeiro dígito verificador estiver errado
    }

    // Calcula o segundo dígito verificador
    soma = 0;
    for (i = 0; i < 10; i++) {
        soma += (cpf[i] - '0') * (11 - i);
    }
    int segundoDigito = 11 - (soma % 11);

    if (segundoDigito >= 10) {
        segundoDigito = 0;
    }

    // Verifica o segundo dígito verificador
    if (cpf[10] - '0' != segundoDigito) {
        return false; // CPF inválido se o segundo dígito verificador estiver errado
    }

    return true; // CPF válido
}

// Função para verificar a estrutura básica de um endereço
bool verificar_endereco(const char *endereco) {
    if (endereco == NULL) {
        return false; // Endereço inválido se for NULL
    }

    // Verifica se o endereço tem pelo menos um caractere
    if (strlen(endereco) == 0) {
        return false; // Endereço inválido se estiver vazio
    }

    // Adicione outras verificações conforme necessário, como verificar se contém números, nomes de rua, cidades, etc.

    return true; // Endereço válido
}

bool verificar_telefone(const char *telefone) {
    if (telefone == NULL) {
        return false; // Telefone inválido se for NULL
    }

    // Verifica se o telefone tem exatamente 10 dígitos
    if (strlen(telefone) != 10) {
        return false; // Telefone inválido se não tiver 10 dígitos
    }

    // Verifica se todos os caracteres são dígitos
    for (int i = 0; telefone[i] != '\0'; i++) {
        if (!isdigit(telefone[i])) {
            return false; // Telefone inválido se contiver caracteres não numéricos
        }
    }

    return true; // Telefone válido
}